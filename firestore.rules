
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Profiles ---
    // Users can create their own profile, and can only read/write their own.
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --- Privileged Content ---
    // A helper function to check if the requesting user is privileged.
    function isPrivileged() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isPrivileged == true;
    }

    // Notes can be read by anyone, but only created/edited/deleted by privileged users.
    match /notes/{noteId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isPrivileged();
    }

    // Announcements can be read by anyone, but only created/edited/deleted by privileged users.
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isPrivileged();
    }

    // --- User-Specific Subcollections ---
    
    // Tasks: Only the user can access their own tasks.
    match /users/{userId}/tasks/{taskId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Exams: 
    // Any authenticated user can READ any exam. This is required for the collection group query
    // that calculates the class average.
    // Users can only WRITE to their own exams subcollection.
    match /users/{userId}/exams/{examId} {
      allow read: if request.auth != null;
      allow write, create, delete: if request.auth != null && request.auth.uid == userId;
    }
  }
}
