
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to get a user's role data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to check if a user is privileged
    function isPrivileged(userId) {
      return isAuthenticated() && getUserData(userId).isPrivileged == true;
    }

    // USER PROFILES
    // A user can read/write their own profile.
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      // An authenticated user can create their own profile document.
      allow create: if isAuthenticated();
    }

    // USER-SPECIFIC SUBCOLLECTIONS

    // TASKS: These are private. Only the owner can manage their tasks.
    match /users/{userId}/tasks/{taskId} {
      allow read, write: if isOwner(userId);
    }
    
    // EXAMS: These have special rules to allow for class average calculation.
    match /users/{userId}/exams/{examId} {
      // The owner can create, update, or delete their own exam record.
      allow write: if isOwner(userId);
      
      // Any authenticated user can *get* a single exam document.
      // This is required for the collection group query to access the data after filtering.
      allow get: if isAuthenticated();
    }
    
    // COLLECTION GROUP 'list' RULE FOR EXAMS
    // This allows the "Class Average" feature to query across all users' exams.
    match /{path=**}/exams/{examId} {
      allow list: if isAuthenticated();
    }

    // PUBLIC-READ COLLECTIONS (Announcements, Notes)
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      // Only privileged users can write to announcements.
      allow write: if isPrivileged(request.auth.uid);
    }
    
    match /notes/{noteId} {
      allow read: if isAuthenticated();
      // Only privileged users can write to notes.
      allow write: if isPrivileged(request.auth.uid);
    }
  }
}
