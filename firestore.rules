
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isPrivileged(userId) {
      // Ensure the user document exists before trying to access its data.
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isPrivileged == true;
    }

    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read, update: if isAuthenticated() && request.auth.uid == userId;
    }

    match /{collection}/{docId} where collection in ['notes', 'announcements'] {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && isPrivileged(request.auth.uid);
    }

    // Rules for user-specific 'tasks'
    match /users/{userId}/tasks/{docId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for user-specific 'exams'
    match /users/{userId}/exams/{examId} {
      // ANY authenticated user can READ ANY exam document for class average calculation.
      allow read: if isAuthenticated();
      
      // ONLY the owner of the document can WRITE (create, update, delete) it.
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}
